;;;; 3-11
;;;; 3-2-4
;;;; 2022/05/20

;;; In section 3.2.3 we saw how the environment model described the behavior of
;;; procedures with local state. Now we have seen how internal definitions
;;; work. A typical message-passing procedure contains both of these
;;; aspects. Consider the bank account procedure of section 3.1.1:
(defun make-account (balance)
  (let ((withdraw
          (lambda (amount)
            (if (>= balance amount)
                (progn (setf balance (- balance amount)) balance)
                "Insufficient funds")))
        (deposit
          (lambda (amount)
            (setf balance (+ balance amount)) balance)))
    (let ((dispatch
            (lambda (m)
              (cond ((equal m 'withdraw) withdraw)
                    ((equal m 'deposit)  deposit)
                    (t (error (format t "Unknown request -- make-account ~A"
                                      m))))))))))
;;; Show the environment structure generated by the sequence of interactions
;;; (define acc (make-account 50))
;;; ((acc 'deposit) 40)
;;; >> 90
;;; ((acc 'withdraw) 60)
;;; >> 30
;;; Where is the local state for `acc` kept? Suppose we define another account
;;; (define acc2 (make-account 100))
;;; How are the local states for the two accounts kept distinct? Which parts of
;;; the environment structure are shard between `acc` and `acc2`?
