(defun make-vector (IxI IyI)
  "Double -> Double -> Vector"
  (cons IxI IyI))
(defun vector-IxI (vector)
  (car vector))
(defun vector-IyI (vector)
  (cdr vector))
;; (defmacro vector-expand (vector vector-IxI-name vector-IyI-name &body body)
;;   `(let ((,vector-IxI-name (vector-IxI ,vector))
;;          (,vector-IyI-name (vector-IyI ,vector)))
;;      ,@body))
(defmacro vector-expand (lst &body body)
  "lst: ((vector vector-IxI-name vector-IyI-name)*)"
  (let ((lst-kai (map 'list
                      (lambda (element)
                        ;; element: (vector vector-IxI-name vector-IyI-name)
                        (let ((vector (car element))
                              (vector-IxI-name (cadr element))
                              (vector-IyI-name (caddr element)))
                          `((,vector-IxI-name (vector-IxI ,vector))
                            (,vector-IyI-name (vector-IyI ,vector)))))
                      lst)))
    ;; lst-kai: (`((,vector-IxI-name (vector-IxI ,vector))
    ;;             (,vector-IyI-name (vector-IyI ,vector)))*)
    (let ((lst-kai-ni (reduce 'append lst-kai)))
      ;; lst-kai-ni: `((,vector-IxI-name (vector-IxI ,vector))*
      ;;               (,vector-IyI-name (vector-IyI ,vector))*)
      `(let (,@lst-kai-ni)
         ,@body))))
(defun vector-add (vector1 vector2)
  "Vector -> Vector -> Vector"
  (vector-expand ((vector1 vector1-IxI vector1-IyI)
                  (vector2 vector2-IxI vector2-IyI))
                 (make-vector (+ vector1-IxI vector2-IxI)
                              (+ vector1-IyI vector2-IyI))))
(defun vector-sub (vector1 vector2)
  "Vector -> Vector -> Vector"
  (vector-expand ((vector1 vector1-IxI vector1-IyI)
                  (vector2 vector2-IxI vector2-IyI))
                 (make-vector (- vector1-IxI vector2-IxI)
                              (- vector1-IyI vector2-IyI))))
(defun vector-scale (number vector)
  "Number -> Vector -> Vector"
  (vector-expand ((vector vector-IxI vector-IyI))
                 (make-vector (* number vector-IxI)
                              (* number vector-IyI))))

(defun test ()
  (let ((vector1 (make-vector 1 1))
        (vector2 (make-vector 2 2)))
    (print (vector-add vector1 vector2))
    (print (vector-sub vector1 vector2))
    (print (vector-scale 2 vector1))
    nil))
