;;;; 2-4-2
;;;; 2022/05/17

(defun square (x)
  (expt x 2))

(defun attach-tag (type-tag contents)
  (cons type-tag contents))
(defun type-tag (datum)
  (if (listp datum)
      (car datum)
      (error (format nil "Bad tagged datum -- type-tag ~A" datum))))
(defun contents (datum)
  (if (listp datum)
      (cdr datum)
      (error (format nil "Bad tagged datum -- contents ~A" datum))))

(defun rectangular? (z)
  (equal 'rectangular (type-tag z)))
(defun polar? (z)
  (equal 'polar (type-tag z)))

(defun real-part-rectangular (z)
  (car z))
(defun imag-part-rectangular (z)
  (cdr z))
(defun magnitude-rectangular (z)
  (sqrt (+ (square (real-part-rectangular z))
           (square (imag-part-rectangular z)))))
(defun angle-rectangular (z)
  (atan (imag-part-rectangle z) (real-part-rectangular z)))
(defun make-from-real-imag-rectangular (real-part imag-part)
  (attach-tag 'rectangular (cons real-part imag-part)))
(defun make-from-mag-ang-rectangular (magnitude angle)
  (let ((real-part (* magnitude (cos angle)))
        (imag-part (* magnitude (sin angle))))
    (make-from-real-imag-rectangular (real-part imag-part))))

(defun magnitude-polar (z)
  (car z))
(defun angle-polar (z)
  (cdr z))
(defun real-part-polar (z)
  (* (magnitude-polar z) (cos (angle-polar z))))
(defun imag-part-polar (z)
  (* (magnitude-polar z) (sin (angle-polar z))))
(defun make-from-mag-ang-polar (magnitude angle)
  (attach-tag 'polar (cons magnitude angle)))
(defun make-from-real-imag-polar (real-part imag-part)
  (let ((magnitude (sqrt (+ (square real-part) (square imag-part))))
        (angle (atan imag-part real-part)))
    (make-from-mag-ang-polar magnitude angle)))

(defun real-part (z)
  (cond ((rectangular? z) (real-part-rectangular z))
        ((polar? z) (real-part-polar z))
        (t (error (format nil "Unknown type -- real-part ~A" z)))))
(defun imag-part (z)
  (cond ((rectangular? z) (imag-part-rectangular z))
        ((polar? z) (imag-part-polar z))
        (t (error (format nil "Unknown type -- imag-part ~A" z)))))
(defun magnitude (z)
  (cond ((rectangular? z) (magnitude-rectangular z))
        ((polar? z) (magnitude-polar z))
        (t (error (format nil "Unknown type -- magnitude ~A" z)))))
(defun angle (z)
  (cond ((rectangular? z) (angle-rectangular z))
        ((polar? z) (angle-polar z))
        (t (error (format nil "Unknown type -- angle ~A" z)))))
(defun make-from-real-imag (real-part imag-part)
  (make-from-real-imag-rectangular real-part imag-part))
(defun make-from-mag-ang (magnitude angle)
  (make-from-mag-ang-polar magnitude angle))

(defun add-complex (z1 z2)
  (make-from-real-imag (+ (real-part z1) (real-part z2))
                       (+ (imag-part z1) (imag-part z2))))
(defun sub-complex (z1 z2)
  (make-from-real-imag (- (real-part z1) (real-part z2))
                       (- (imag-part z1) (imag-part z2))))
(defun mul-complex (z1 z2)
  (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                     (+ (angle z1) (angle z2))))
(defun div-complex (z1 z2)
  (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                     (- (angle z1) (angle z2))))
